package fawda.java.webservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.1 2018-05-29T10:34:21.624+08:00
 * Generated source version: 3.2.1
 * 
 */
@WebServiceClient(name = "EdocWebService", wsdlLocation = "http://192.168.1.111:8080/edocument/service/EdocWebService?wsdl", targetNamespace = "http://webservice.wellhope.com")
public class EdocWebService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://webservice.wellhope.com", "EdocWebService");
    public final static QName EdocWebServiceHttpPort = new QName("http://webservice.wellhope.com", "EdocWebServiceHttpPort");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.1.111:8080/edocument/service/EdocWebService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(EdocWebService.class.getName()).log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "http://192.168.1.111:8080/edocument/service/EdocWebService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public EdocWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EdocWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EdocWebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public EdocWebService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public EdocWebService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public EdocWebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns EdocWebServicePortType
     */
    @WebEndpoint(name = "EdocWebServiceHttpPort")
    public EdocWebServicePortType getEdocWebServiceHttpPort() {
        return super.getPort(EdocWebServiceHttpPort, EdocWebServicePortType.class);
    }

    /**
     * 
     * @param features
     *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
     *            on the proxy. Supported features not in the
     *            <code>features</code> parameter will have their default
     *            values.
     * @return returns EdocWebServicePortType
     */
    @WebEndpoint(name = "EdocWebServiceHttpPort")
    public EdocWebServicePortType getEdocWebServiceHttpPort(WebServiceFeature... features) {
        return super.getPort(EdocWebServiceHttpPort, EdocWebServicePortType.class, features);
    }

}
